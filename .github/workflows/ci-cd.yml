name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/taskflow

jobs:
  # Backend Tests
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: Restore dependencies
        working-directory: ./workspacev1/api
        run: dotnet restore
      
      - name: Build
        working-directory: ./workspacev1/api
        run: dotnet build --no-restore -c Release
      
      - name: Test
        working-directory: ./workspacev1/api
        run: dotnet test --no-build --verbosity normal -c Release

  # Frontend Tests
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './workspacev1/client/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./workspacev1/client
        run: npm ci
      
      - name: Run tests
        working-directory: ./workspacev1/client
        run: npm test -- --coverage --watchAll=false
      
      - name: Build
        working-directory: ./workspacev1/client
        run: npm run build

  # Build and Push Docker Images
  build-images:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-api
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha
            latest
      
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./workspacev1/api
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Extract metadata (tags, labels) for Client
        id: meta-client
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-client
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha
            latest
      
      - name: Build and push Client image
        uses: docker/build-push-action@v5
        with:
          context: ./workspacev1/client
          push: true
          tags: ${{ steps.meta-client.outputs.tags }}
          labels: ${{ steps.meta-client.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Production (example)
  deploy:
    needs: build-images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://taskflow.yourdomain.com
    
    steps:
      - name: Deploy to server
        run: |
          echo "Deploying to production..."
          # Add your deployment script here
          # Examples:
          # - SSH to server and pull new images
          # - Use kubectl for Kubernetes
          # - Use Azure CLI for Azure Container Instances
          # - Use AWS CLI for ECS
